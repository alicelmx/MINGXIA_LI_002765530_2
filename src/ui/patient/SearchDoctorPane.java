/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.patient;

import dao.AppointmentDao;
import dao.CommunityDao;
import dao.DoctorDao;
import dao.HospitalDao;
import dao.PatientDao;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Doctor;
import model.Hospital;
import model.NearDoctorModel;
import model.Patient;
import org.apache.commons.lang3.ObjectUtils;

/**
 *
 * @author limingxia
 */
public class SearchDoctorPane extends javax.swing.JPanel {

    private PatientDao patientDao = new PatientDao();
    private HospitalDao hospitalDao = new HospitalDao();
    private DoctorDao doctorDao = new DoctorDao();
    private AppointmentDao appointmentDao = new AppointmentDao();
    private CommunityDao communityDao = new CommunityDao();

    public List<NearDoctorModel> nearDoctorList;
    public Patient patient;

    /**
     * Creates new form PatientAppointmentPane
     */
    public SearchDoctorPane() {
        initComponents();
    }

    public SearchDoctorPane(Patient patient) {
        this.patient = patient;

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBrowseDoctors = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbNearDoctors = new javax.swing.JTable();
        txtSearchArea = new javax.swing.JTextField();
        btnMakeAppointment1 = new javax.swing.JButton();

        btnBrowseDoctors.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/search.png"))); // NOI18N
        btnBrowseDoctors.setText("search");
        btnBrowseDoctors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseDoctorsActionPerformed(evt);
            }
        });

        tbNearDoctors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Hospital", "Department", "Available Time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbNearDoctors);

        txtSearchArea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchAreaActionPerformed(evt);
            }
        });

        btnMakeAppointment1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/add.png"))); // NOI18N
        btnMakeAppointment1.setText("Make Appointment");
        btnMakeAppointment1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeAppointment1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtSearchArea, javax.swing.GroupLayout.PREFERRED_SIZE, 361, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBrowseDoctors))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 524, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMakeAppointment1, javax.swing.GroupLayout.Alignment.TRAILING)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBrowseDoctors, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSearchArea, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 280, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addComponent(btnMakeAppointment1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(80, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseDoctorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseDoctorsActionPerformed

        List<Hospital> hospitalList = hospitalDao.findHospitalByCommunity(patient.getCommunity());
        if (ObjectUtils.isEmpty(hospitalList)) {
            return;
        }

        nearDoctorList = new ArrayList<>();

        List<Doctor> doctors = doctorDao.queryAllDoctor();
        doctors.stream().forEach(doctor -> {
            hospitalList.stream().forEach(hospital -> {
                if (doctor.gethName().equals(hospital.gethName())) {
                    NearDoctorModel nearDoctorModel = new NearDoctorModel();

                    nearDoctorModel.setHospital(hospital.gethName());
                    nearDoctorModel.setAvailableTime(doctor.getAvailableTime());
                    nearDoctorModel.setName(doctor.getdName());
                    nearDoctorModel.setDepartment(doctor.getDepartment());

                    nearDoctorList.add(nearDoctorModel);
                }
            });
        });

        populateTable();

    }//GEN-LAST:event_btnBrowseDoctorsActionPerformed

    private void txtSearchAreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchAreaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchAreaActionPerformed

    private void btnMakeAppointment1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMakeAppointment1ActionPerformed
        int selectedRowIndex = tbNearDoctors.getSelectedRow();

        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please Select a Community to Edit.");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tbNearDoctors.getModel();
        NearDoctorModel seletedNearDoctorModel = (NearDoctorModel) model.getValueAt(selectedRowIndex, 0);
        String hospitalName = (String) model.getValueAt(selectedRowIndex, 1);

        MakeAppointmentFrame makeAppointmentFrame = new MakeAppointmentFrame(seletedNearDoctorModel, patient.getFirstName() + " " + patient.getLastName());
        makeAppointmentFrame.setLocationRelativeTo(null);
        makeAppointmentFrame.setVisible(true);
    }//GEN-LAST:event_btnMakeAppointment1ActionPerformed

    private void populateTable() {
//                if (ObjectUtils.isEmpty(hospitalList)) {
//            return;
//        }
        DefaultTableModel model = (DefaultTableModel) tbNearDoctors.getModel();
        model.setRowCount(0);

        for (NearDoctorModel doctor : nearDoctorList) {

            Object[] row = new Object[4];
            row[0] = doctor;
            row[1] = doctor.getHospital();
            row[2] = doctor.getDepartment();
            row[3] = doctor.getAvailableTime();

            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseDoctors;
    private javax.swing.JButton btnMakeAppointment1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbNearDoctors;
    private javax.swing.JTextField txtSearchArea;
    // End of variables declaration//GEN-END:variables
}
