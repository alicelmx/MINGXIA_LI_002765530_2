/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui.system;

import dao.DoctorDao;
import dao.EncounterDao;
import dao.HospitalDao;
import dao.PatientDao;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Doctor;
import model.DoctorDirectory;
import model.Encounter;
import model.Hospital;
import model.Patient;
import model.PatientDirectory;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;
import ui.patient.MakeAppointmentFrame;

/**
 *
 * @author limingxia
 */
public class AddAppointmentFrame extends javax.swing.JFrame {

    public PatientDirectory patientDirectory = new PatientDirectory();
    public List<Patient> patientList;

    public DoctorDirectory doctorDirectory = new DoctorDirectory();
    public List<Doctor> doctorList;

    public Hospital curHospital;

    /**
     * Creates new form AddAppointmentFrame
     */
    public AddAppointmentFrame() {
        queryInitialdata();

        initComponents();

        populatePatientTable(patientDirectory.getPatientList());
        populateDoctorTable(doctorDirectory.getDoctorList());
    }

    public AddAppointmentFrame(Hospital curHospital) {
        this.curHospital = curHospital;
        queryInitialdata();

        initComponents();

        populatePatientTable(patientDirectory.getPatientList());
        populateDoctorTable(doctorDirectory.getDoctorList());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SearchPatientPane = new javax.swing.JPanel();
        txtKeyword = new javax.swing.JTextField();
        btnSearchPatient = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbPatient = new javax.swing.JTable();
        SearchPatientPane1 = new javax.swing.JPanel();
        txtKeyword1 = new javax.swing.JTextField();
        btnSearchDoctor = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbDoctor = new javax.swing.JTable();
        btnMakeAppointment4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        SearchPatientPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Patient", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 16), new java.awt.Color(0, 153, 153))); // NOI18N

        txtKeyword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKeywordActionPerformed(evt);
            }
        });

        btnSearchPatient.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/search.png"))); // NOI18N
        btnSearchPatient.setText("search");
        btnSearchPatient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchPatientActionPerformed(evt);
            }
        });

        tbPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "PatientID", "Name", "Phone", "DateOfBirth"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbPatient);

        javax.swing.GroupLayout SearchPatientPaneLayout = new javax.swing.GroupLayout(SearchPatientPane);
        SearchPatientPane.setLayout(SearchPatientPaneLayout);
        SearchPatientPaneLayout.setHorizontalGroup(
            SearchPatientPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchPatientPaneLayout.createSequentialGroup()
                .addGroup(SearchPatientPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(SearchPatientPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, SearchPatientPaneLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnSearchPatient)))
                .addGap(0, 20, Short.MAX_VALUE))
        );
        SearchPatientPaneLayout.setVerticalGroup(
            SearchPatientPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchPatientPaneLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(SearchPatientPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchPatient, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKeyword, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        SearchPatientPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search Doctor", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Helvetica Neue", 1, 16), new java.awt.Color(0, 153, 153))); // NOI18N

        txtKeyword1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtKeyword1ActionPerformed(evt);
            }
        });

        btnSearchDoctor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/search.png"))); // NOI18N
        btnSearchDoctor.setText("search");
        btnSearchDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDoctorActionPerformed(evt);
            }
        });

        tbDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Hospital", "Department", "Date", "Community", "Zip Code"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tbDoctor);

        javax.swing.GroupLayout SearchPatientPane1Layout = new javax.swing.GroupLayout(SearchPatientPane1);
        SearchPatientPane1.setLayout(SearchPatientPane1Layout);
        SearchPatientPane1Layout.setHorizontalGroup(
            SearchPatientPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchPatientPane1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(SearchPatientPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addGroup(SearchPatientPane1Layout.createSequentialGroup()
                        .addComponent(txtKeyword1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(btnSearchDoctor)))
                .addGap(0, 20, Short.MAX_VALUE))
        );
        SearchPatientPane1Layout.setVerticalGroup(
            SearchPatientPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SearchPatientPane1Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(SearchPatientPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearchDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtKeyword1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(10, Short.MAX_VALUE))
        );

        btnMakeAppointment4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/write.png"))); // NOI18N
        btnMakeAppointment4.setText("Make Appointment");
        btnMakeAppointment4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeAppointment4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(215, 215, 215)
                        .addComponent(btnMakeAppointment4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SearchPatientPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SearchPatientPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(SearchPatientPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(SearchPatientPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnMakeAppointment4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtKeywordActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKeywordActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKeywordActionPerformed

    private void btnSearchPatientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchPatientActionPerformed
        String keyword = txtKeyword.getText();
        if (StringUtils.isBlank(keyword)) {
            JOptionPane.showMessageDialog(this, "Please Input Keyword to Search!");
            // 没有刷新按钮的补偿机制
            queryInitialdata();
            populatePatientTable(patientDirectory.getPatientList());

            return;
        }

        List<Patient> searchResult = patientDirectory.searchByKeyword(keyword);

        populatePatientTable(searchResult);
    }//GEN-LAST:event_btnSearchPatientActionPerformed

    private void txtKeyword1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtKeyword1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtKeyword1ActionPerformed

    private void btnSearchDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDoctorActionPerformed

        String keyword = txtKeyword.getText();
        if (StringUtils.isBlank(keyword)) {
            JOptionPane.showMessageDialog(this, "Please Input Keyword to Search.");

            // 没有刷新按钮的补偿机制
            queryInitialdata();
            populateDoctorTable(doctorDirectory.getDoctorList());

            return;
        }

        List<Doctor> searchResult = doctorList.stream().filter(d
                -> d.getdName().equalsIgnoreCase(keyword)
                || d.getdName().contains(keyword)
                || d.getDepartment().equalsIgnoreCase(keyword)
                || d.gethName().equalsIgnoreCase(keyword)
                || d.gethName().contains(keyword)
                || d.getAvailableTime().contains(keyword)
                || d.getCommunity().equalsIgnoreCase(keyword)
                || d.getCommunity().contains(keyword)
                || d.getZipCode().equalsIgnoreCase(keyword)
        ).collect(Collectors.toList());

        populateDoctorTable(searchResult);
    }//GEN-LAST:event_btnSearchDoctorActionPerformed

    private void btnMakeAppointment4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMakeAppointment4ActionPerformed
        int selectedPatientIndex = tbPatient.getSelectedRow();
        int selectedDoctorIndex = tbDoctor.getSelectedRow();

        if (selectedPatientIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please Select a Patient!");
            return;
        }
        if (selectedDoctorIndex < 0) {
            JOptionPane.showMessageDialog(this, "Please Select a Doctor!");
            return;
        }

        DefaultTableModel doctorModel = (DefaultTableModel) tbDoctor.getModel();
        Doctor selectedDoctor = (Doctor) doctorModel.getValueAt(selectedDoctorIndex, 0);

        DefaultTableModel patientModel = (DefaultTableModel) tbPatient.getModel();
        Patient selectedPatient = (Patient) patientModel.getValueAt(selectedPatientIndex, 0);

        MakeAppointmentFrame makeAppointmentFrame = new MakeAppointmentFrame(selectedDoctor, selectedPatient);
        makeAppointmentFrame.setLocationRelativeTo(null);
        makeAppointmentFrame.setVisible(true);

        this.dispose();
    }//GEN-LAST:event_btnMakeAppointment4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddAppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddAppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddAppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddAppointmentFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddAppointmentFrame().setVisible(true);
            }
        });
    }

    private void populatePatientTable(List<Patient> patients) {

        DefaultTableModel model = (DefaultTableModel) tbPatient.getModel();
        model.setRowCount(0);

        if (ObjectUtils.isEmpty(patients)) {
            return;
        }

        for (Patient patient : patients) {

            Object[] row = new Object[4];
            row[0] = patient;
            row[1] = patient.getFullName();
            row[2] = patient.getPhoneNum();
            row[3] = patient.getDateOfBirth();

            model.addRow(row);
        }
    }

    private void populateDoctorTable(List<Doctor> doctors) {

        DefaultTableModel model = (DefaultTableModel) tbDoctor.getModel();
        model.setRowCount(0);

        if (ObjectUtils.isEmpty(doctors)) {
            return;
        }

        for (Doctor doctor : doctors) {

            Hospital hospital = HospitalDao.queryHospitalByHID(doctor.getHid());

            Object[] row = new Object[6];
            row[0] = doctor;
            row[1] = doctor.gethName();
            row[2] = doctor.getDepartment();
            row[3] = doctor.getAvailableTime();
            // hospital attr
            row[4] = hospital.getCommunity();
            row[5] = hospital.getZipCode();

            model.addRow(row);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel SearchPatientPane;
    private javax.swing.JPanel SearchPatientPane1;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBack1;
    private javax.swing.JButton btnBack2;
    private javax.swing.JButton btnMakeAppointment1;
    private javax.swing.JButton btnMakeAppointment2;
    private javax.swing.JButton btnMakeAppointment3;
    private javax.swing.JButton btnMakeAppointment4;
    private javax.swing.JButton btnSearchDoctor;
    private javax.swing.JButton btnSearchPatient;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tbDoctor;
    private javax.swing.JTable tbPatient;
    private javax.swing.JTextField txtKeyword;
    private javax.swing.JTextField txtKeyword1;
    // End of variables declaration//GEN-END:variables

    private void queryInitialdata() {
        if (ObjectUtils.isEmpty(curHospital)) {
            patientList = PatientDao.queryAllPatientModel();
            doctorList = DoctorDao.queryAllDoctor();

            patientDirectory.setPatientList(patientList);
            doctorDirectory.setDoctorList(doctorList);

        } else {
            patientDirectory.clearAll();

            List<Encounter> encounters = EncounterDao.queryEncounterByHID(curHospital.getHid());
            if (ObjectUtils.isEmpty(encounters)) {
                return;
            }
            encounters.forEach(e -> {
                Patient p = PatientDao.queryPatientByPid(e.getPid());
                if (!patientDirectory.containPatient(p)) {
                    patientDirectory.addPatient(p);
                }
            });

            doctorList = DoctorDao.queryDoctorByHid(curHospital.getHid());
            doctorDirectory.setDoctorList(doctorList);
        }
    }
}
